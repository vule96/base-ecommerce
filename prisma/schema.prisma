generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid()) @map("id") @db.Uuid
  avatar          String?      @map("avatar") @db.VarChar(255)
  email           String       @unique @map("email")
  username        String       @unique @map("username")
  isEmailVerified Boolean      @default(false) @map("is_email_verified")
  firstName       String       @map("first_name") @db.VarChar(100)
  lastName        String       @map("last_name") @db.VarChar(100)
  password        String       @map("password") @db.VarChar(100)
  phone           String       @map("phone") @db.VarChar(20)
  salt            String       @map("salt") @db.VarChar(50)
  status          user_status? @default(active) @map("status")
  role            user_role    @default(user) @map("role")
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  tokens          Token[]

  @@index([status], map: "idx_user_status")
  @@index([role], map: "idx_user_role")
  @@map("user")
}

model Token {
  id            String   @id @default(uuid()) @map("id") @db.Uuid
  token         String   @map("token")
  expiresAt     DateTime @map("expires_at") @db.Timestamptz
  isBlacklisted Boolean  @default(false) @map("is_blacklisted")
  ipAddress     String?  @map("ip_address") @db.VarChar(45)
  userAgent     String?  @map("user_agent") @db.VarChar(100)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  userId        String   @map("user_id") @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_token_user_id")
  @@index([isBlacklisted], map: "idx_blacklisted")
  @@map("token")
}

model Product {
  id                String             @id @default(uuid()) @map("id") @db.Uuid
  name              String             @unique @map("name") @db.VarChar(100)
  slug              String             @unique @map("slug") @db.VarChar(100)
  description       String             @map("description") @db.Text
  price             Decimal            @map("price") @db.Decimal(10, 2)
  stock             Int                @default(0) @map("stock") @db.Integer
  status            product_status?    @default(active) @map("status")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  categoryId        String?            @map("category_id") @db.Uuid
  category          Category?          @relation(fields: [categoryId], references: [id])
  productAttributes ProductAttribute[]
  productVariants   ProductVariant[]

  @@index([slug], map: "idx_product_slug")
  @@index([status], map: "idx_product_status")
  @@index([categoryId], map: "idx_product_category_id")
  @@map("product")
}

model Category {
  id        String           @id @default(uuid()) @map("id") @db.Uuid
  name      String           @unique @map("name") @db.VarChar(100)
  slug      String           @unique @map("slug") @db.VarChar(100)
  parentId  String?          @map("parent_id") @db.Uuid
  status    category_status? @default(active) @map("status")
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  parent    Category?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[]       @relation("CategoryHierarchy")
  products  Product[]

  @@index([slug], map: "idx_category_slug")
  @@index([status], map: "idx_category_status")
  @@index([parentId], map: "idx_category_parent_id")
  @@map("category")
}

model Attribute {
  id              String           @id @default(uuid()) @map("id") @db.Uuid
  name            String           @unique @map("name") @db.VarChar(100)
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  attributeValues AttributeValue[]

  @@map("attribute")
}

model AttributeValue {
  id                String             @id @default(uuid()) @map("id") @db.Uuid
  value             String             @db.VarChar(100)
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  attributeId       String             @map("attribute_id") @db.Uuid
  attribute         Attribute          @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  productAttributes ProductAttribute[]

  @@index([attributeId], map: "idx_attribute_value_attribute_id")
  @@map("attribute_value")
}

model ProductAttribute {
  id               String         @id @default(uuid()) @map("id") @db.Uuid
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  productId        String         @map("product_id") @db.Uuid
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeValueId String         @map("attribute_value_id") @db.Uuid
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)

  @@index([productId, attributeValueId], map: "idx_product_attribute_value")
  @@map("product_attribute")
}

model Variant {
  id             String          @id @default(uuid()) @map("id") @db.Uuid
  name           String          @map("name") @db.VarChar(100)
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  variantOptions VariantOption[]

  @@map("variant")
}

model VariantOption {
  id              String           @id @default(uuid()) @map("id") @db.Uuid
  value           String           @db.VarChar(100)
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  variantId       String           @map("variant_id") @db.Uuid
  variant         Variant          @relation(fields: [variantId], references: [id], onDelete: Cascade)
  productVariants ProductVariant[]

  @@index([variantId], map: "idx_variant_option_variant_id")
  @@map("variant_option")
}

model ProductVariant {
  id              String        @id @default(uuid()) @map("id") @db.Uuid
  price           Decimal       @map("price") @db.Decimal(10, 2)
  stock           Int           @default(0) @map("stock") @db.Integer
  sku             String        @unique @map("sku") @db.VarChar(50)
  barcode         String?       @unique @map("barcode") @db.VarChar(50)
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  productId       String        @map("product_id") @db.Uuid
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantOptionId String        @map("variant_option_id") @db.Uuid
  variantOption   VariantOption @relation(fields: [variantOptionId], references: [id], onDelete: Cascade)

  @@index([productId, variantOptionId], map: "idx_product_variant_option")
  @@map("product_variant")
}

enum user_status {
  active
  inactive
  banned
  pending
}

enum product_status {
  draft
  active
  inactive
  archived
}

enum category_status {
  active
  inactive
}

enum user_role {
  user
  admin
}
