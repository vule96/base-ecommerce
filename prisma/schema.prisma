generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid()) @map("id") @db.Uuid
  avatar          String?      @map("avatar") @db.VarChar(255)
  email           String       @unique @map("email")
  username        String       @unique @map("username")
  isEmailVerified Boolean      @default(false) @map("is_email_verified")
  firstName       String       @map("first_name") @db.VarChar(100)
  lastName        String       @map("last_name") @db.VarChar(100)
  password        String       @map("password") @db.VarChar(100)
  salt            String       @map("salt") @db.VarChar(50)
  status          user_status? @default(active) @map("status")
  role            user_role    @default(user) @map("role")
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  tokens Token[]

  @@index([status], map: "status")
  @@index([role], map: "role")
  @@map("user")
}

model Token {
  id            String   @id @default(uuid()) @map("id") @db.Uuid
  token         String   @map("token")
  expiresAt     DateTime @map("expires_at") @db.Timestamptz
  isBlacklisted Boolean  @default(false) @map("is_blacklisted")
  ipAddress     String?  @map("ip_address") @db.VarChar(45)
  userAgent     String?  @map("user_agent") @db.VarChar(100)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  userId        String   @map("user_id") @db.Uuid
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "token_user_id")
  @@index([isBlacklisted], map: "idx_blacklisted")
  @@map("token")
}

model Product {
  id               String          @id @default(uuid()) @map("id") @db.Uuid
  name             String          @unique @map("name") @db.VarChar(100)
  slug             String          @unique @map("slug") @db.VarChar(100)
  description      String          @map("description") @db.Text
  shortDescription String          @map("short_description") @db.VarChar(100)
  // sku              String          @map("sku") @db.VarChar(100)
  status           product_status? @default(active) @map("status")
  createdAt        DateTime        @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  categoryId       String?         @map("category_id") @db.Uuid
  category         Category?       @relation(fields: [categoryId], references: [id])

  @@map("product")
}

model Category {
  id        String           @id @default(uuid()) @map("id") @db.Uuid
  name      String           @unique @map("name") @db.VarChar(100)
  slug      String           @unique @map("slug") @db.VarChar(100)
  parentId  String?          @map("parent_id") @db.Uuid
  status    category_status? @default(active) @map("status")
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  parent    Category?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[]       @relation("CategoryHierarchy")
  products  Product[]

  @@index([parentId], map: "parent_id")
  @@map("category")
}

enum user_status {
  active
  inactive
}

enum product_status {
  active
  inactive
}

enum category_status {
  active
  inactive
}

enum user_role {
  user
  admin
}
